@using Synapse.UI.Modules.PlanExecution
@using Synapse.Core
@using Microsoft.AspNetCore.Html
@using Kendo.Mvc.UI
@{
    ViewBag.Title = "Plan Execution";
}

@{
    Func<dynamic, IHtmlContent> ShowExecuteTabContent =
        @<text>
        <div id="plan-input-container" data-bind="visible: planInputIsVisible">
            <div style="margin-bottom:3px;padding:5px;background-color: #666;color:#fff; position:relative;">
                <label>Request number: </label>
                @(Html.Kendo().TextBox().Name("txt-request-number").HtmlAttributes(new { data_bind = "enabled: planSelected" }))
                @(Html.Kendo().Button().Name("btn-execute-plan").Icon("play").Content("Execute").Events(e => e.Click("SYNAPSEUI.planExec.btnExecutePlanClick")).HtmlAttributes(new { type = "button", data_bind = "enabled: planSelected, visible: isExecute" }))
                @(Html.Kendo().Button().Name("btn-reset").Icon("reset").Content("Reset").Events(e => e.Click("SYNAPSEUI.planExec.btnResetClick")).HtmlAttributes(new { type = "button", data_bind = "enabled: planSelected, visible: isReset" }))
                @(Html.Kendo().Button().Name("btn-show-plan-diagram").Content("Show Diagram").HtmlAttributes(new { type = "button", style = "position:absolute; right: 10px;", data_bind = "events:{ click: toggleShowPlanDiagram }, enabled: planSelected" }))
            </div>
            <div id="dyn-parm-editor">
                @(Html.Kendo().TreeList<Synapse.UI.Modules.PlanExecution.ViewModels.DynamicParameterVM>()
                            .Name( "treelist-dynamic-parms" )
                            .AutoBind( false )
                            .Columns( columns =>
                            {
                                columns.Add().Field( c => c.ActionName ).Width( 200 ).TemplateId( "treelist-dynamic-parms-actionname-template" );
                                columns.Add().Field( c => c.Source );
                                columns.Add().Field( c => c.DataType );
                                columns.Add().Field( c => c.Validation );
                                columns.Add().Title( "Value" ).Width( 200 ).TemplateId( "treelist-dynamic-parms-override-template" );
                                columns.Add().Title( "Pass Blank Value?" ).Width( 80 ).TemplateId( "treelist-dynamic-parms-pass-blank-template" ).HtmlAttributes( new { style = "text-align:center" } ).HeaderAttributes( new { @style = "text-align:center" } );
                            } )
                            .Resizable( true )
                            .Sortable( false )
                            .Selectable( false )
                            .DataSource( dataSource => dataSource
                                 .Read( read => read.Action( "GetDynamicParameters", "PlanExecution" ).Data( "SYNAPSEUI.planExec.treelistDynamicParmsData" ).Type( HttpVerbs.Get ) )
                                 .Model( m =>
                                 {
                                     m.Expanded( true );
                                     m.Id( f => f.Id );
                                     m.ParentId( f => f.ParentId );
                                     m.Field( f => f.ActionName );
                                     m.Field( f => f.IsActionGroup );
                                     m.Field( f => f.Source );
                                 } )
                                .Events( e => e.Error( "SYNAPSEUI.planExec.dataSourceError" ) )
                            )
                            .Events( e => e.DataBound( "SYNAPSEUI.planExec.treelistDynamicParmsDataBound" ) )
                //.HtmlAttributes(new { style = "width:100%;" })
                )
            </div>
        </div>
        <div id="plan-diagram-container" data-bind="visible: planDiagramIsVisible">
            <div style="margin-bottom:3px;padding:5px;background-color: #666;color:#fff;">
                <button class="k-button" style="visibility:hidden">dummy</button>
                @(Html.Kendo().Button().Name("btn-hide-plan-input").Content("Hide Diagram").HtmlAttributes(new { type = "button", style = "float:right; right:10px;", data_bind = "events:{ click: toggleShowPlanDiagram }, enabled: planSelected" }))
            </div>
            <div style="box-sizing:border-box;">
                <div id="diagram-plan" style="overflow:auto;"></div>
            </div>
        </div>
        </text>;

    Func<dynamic, IHtmlContent> ShowStatusTabContent =
        @<text>
        <div style="margin-bottom:3px; padding:5px;background-color: #666;color:#fff;">
            <label>Show n records:</label>&nbsp;
            @(Html.Kendo().DropDownList().Name( "ddl-show-n-recs" )
                        .DataTextField( "Text" )
                        .DataValueField( "Value" )
                        .BindTo( new List<SelectListItem>() {
                    new SelectListItem() {
                    Text = "5",
                    Value = "5"
                    },
                    new SelectListItem() {
                    Text = "25",
                    Value = "25"
                    },
                    new SelectListItem() {
                    Text = "50",
                    Value = "50"
                    },
                    new SelectListItem() {
                    Text = "All",
                    Value = "0"
                    }
                        } )
                        .HtmlAttributes( new
                        {
                            style = "width: auto;",
                            data_bind = "value: showNRecs"
                        } )
            )
            &nbsp;
            <input id="chk-auto-refresh-status" type="checkbox" class="k-checkbox" data-bind="checked: autoRefreshStatus, enabled: planSelected, events: {  change: autoRefreshStatusChange }" />
            <label class="k-checkbox-label" for="chk-auto-refresh-status" style="vertical-align: middle;">Refresh every <span data-bind="text: autoRefreshStatusCountDown"></span> secs</label>&nbsp;
            @(Html.Kendo().Button().Name( "btn-refresh-plan-history" ).Icon( "refresh" ).Content( "Refresh" ).Events( e => e.Click( "SYNAPSEUI.planExec.btnRefreshPlanHistoryClick" ) ).HtmlAttributes( new { type = "button", data_bind = "enabled: planSelected" } ))
        </div>
        @(Html.Kendo().Grid<Synapse.UI.Modules.PlanExecution.ViewModels.PlanHistoryVM>() //.NoRecords(n => n.Template("No records to display"))
                        .Name("grid-plan-history")
                        .AutoBind(false)
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .ServerOperation(true)
                            .Read(read => read.Action("GetPlanHistoryList", "PlanExecution").Data("SYNAPSEUI.planExec.gridPlanHistoryData").Type(HttpVerbs.Post))
                            .Events( e => e.Error( "SYNAPSEUI.planExec.dataSourceError" ) )
                            )
                        .Columns(columns =>
                        {
                            columns.Bound(p => p.PlanInstanceId).Width(150).Title("Instance Id");
                            columns.Bound(p => p.RequestUser).Width(100);
                            columns.Bound(p => p.RequestNumber).Width(100);
                            columns.Bound(p => p.LastModified).Width(150);
                            columns.Bound(p => p.Status).Width(150).HtmlAttributes(new { style = "color: #= StatusColor #" });
                        })
                        .Selectable()
                        .Navigatable()
                        .Events(e => e.Change("SYNAPSEUI.planExec.gridPlanHistoryChange").DataBound("SYNAPSEUI.planExec.gridPlanHistoryDataBound").Navigate("SYNAPSEUI.planExec.gridPlanHistoryNavigate"))
                        //.Scrollable(scr => scr.Enabled(true).Height(250))
                        .Scrollable(scr => scr.Enabled(true))
                        .Resizable(resize => resize.Columns(true))
        //.HtmlAttributes(new { style = "height:200px;margin-bottom: 3px;" })

        )

        <div style="margin-bottom:3px; padding: 5px; background-color: #666;color:#fff; position:relative;">
            <label>Instance Id: </label>&nbsp;<span id="span-plan-instance-id" data-bind="text: selectedInstanceId"></span>
            @(Html.Kendo().Button().Name("btn-refresh-result-plan").Icon("refresh").Content("Refresh").Events(e => e.Click("SYNAPSEUI.planExec.btnRefreshResultPlanClick")).HtmlAttributes(new { type = "button", data_bind = "enabled: instanceSelected" }))
            @(Html.Kendo().Button().Name("btn-cancel-plan").Icon("close").Content("Cancel").Events(e => e.Click("SYNAPSEUI.planExec.btnCancelPlanClick")).HtmlAttributes(new { type = "button", data_bind = "enabled: instanceSelected" }))

            @(Html.Kendo().Button().Name("btn-show-result-plan-diagram").Content("Show Diagram").HtmlAttributes(new { type = "button", style = "position:absolute; right: 10px;", data_bind = "events:{ click: toggleShowResultPlanDiagram }, enabled: instanceSelected" }))

        </div>
        <div id="result-plan-code-container" style="position:relative;" data-bind="visible: resultPlanCodeIsVisible">
            <!-- Keep the <pre> and <code> tags together in 1 line as we dont want to have unnecessary leading white spaces because of the indentations -->
            <pre><code id='code-result-plan'></code></pre>
            <div id="text-resize-container" style="position:absolute; top:0;right:20px;">
                <a href="#" id="text-smaller" class="k-link" style="display:inline-block;padding:3px;font-weight:bold;" data-bind="click: reduceTextSize">A-</a>
                <a href="#" id="text-normal" class="k-link" style="display:inline-block;padding:3px;font-weight:bold;" data-bind="click: resetTextSize">A</a>
                <a href="#" id="text-larger" class="k-link" style="display:inline-block;padding:3px;font-weight:bold;" data-bind="click: increaseTextSize">A+</a>
            </div>
        </div>
        <div id="result-plan-diagram-container" data-bind="visible: resultPlanDiagramIsVisible"><div id='diagram-result-plan'></div></div>

        </text>;

    Func<dynamic, IHtmlContent> ShowHelpTabContent =
        @<text><div style="height:100%;"></div>
        </text>;


}
<div class="plan">
    <div class="plan-row" style="height:1px;">
        <div class="plan-cell plan-cell-header">
            <span>Plan Container Tree</span>
        </div>
        <div class="plan-cell plan-cell-header">
            <span>
                <span id="span-filter-type" class="k-content regex-filter" title="Choose RegEx or In-string filter mode" data-bind="click: toggleFilterType"></span>
                @(Html.Kendo().TextBox().Name("txt-filter").HtmlAttributes(new { placeholder = "regex filter", style = "width: 160px;" }))
                @(Html.Kendo().Button().Name("btn-refresh-plan-list").Icon("refresh").Events(e => e.Click("SYNAPSEUI.planExec.btnRefreshPlanListClick")).HtmlAttributes(new { type = "button", title = "Refresh list" }))
            </span>
        </div>
        <div class="plan-cell plan-cell-header">
            <span style="display:inline-block;color:#fff;">Plan name: </span>&nbsp;<span id="span-planname" data-bind="text: selectedPlanName"></span>
        </div>
    </div>
    <div class="plan-row">
        <div class="plan-cell">
            
        </div>
        <div class="plan-cell">
            <div style="height:100%;">
                @(Html.Kendo().ListBox().Name("listbox-plan-list")
                .Selectable(ListBoxSelectable.Single)
                .DataSource(ds => ds.Read(read => read.Action("GetPlanList", "PlanExecution").Data("SYNAPSEUI.planExec.listboxPlanListData")).Events( e => e.Error( "SYNAPSEUI.planExec.dataSourceError" ) ) )
                .Events(e => e
                    .Change("SYNAPSEUI.planExec.listboxPlanListChange")
                    .DataBound("SYNAPSEUI.planExec.listboxPlanListDataBound"))
                .HtmlAttributes(new { style = "width: 100%;height:100%;" })
                )
            </div>
        </div>
        <div class="plan-cell">
            <div>
                @(Html.Kendo().TabStrip()
                    .Name("tabstrip") //The name of the TabStrip is mandatory. It specifies the "id" attribute of the widget.
                    .Navigatable(false)
                    .Items(items =>
                    {
                        items.Add().Text("Execute").Selected(true).Content(@<text>@ShowExecuteTabContent(null)</text>
                        );
                        items.Add().Text("Status").Content(@<text>@ShowStatusTabContent(null)</text>
                        );
                        items.Add().Text("Logs").Content(
                            @<text>
                            <div style="margin-bottom:3px; padding:5px;background-color: #666;">
                                @(Html.Kendo().Button().Name("btn-refresh-logs").Icon("refresh").Content("Refresh").Events(e => e.Click("SYNAPSEUI.planExec.btnRefreshLogsClick")).HtmlAttributes(new { type = "button", data_bind = "enabled: planSelected" }))
                            </div>
                            </text>
                        );
                        items.Add().Text("Help").Content(@<text>@ShowHelpTabContent(null)</text>);
                    })
                    .Animation(false)
                    .Events(e => e.Select("SYNAPSEUI.planExec.tabstripSelect"))
                )
            </div>
        </div>
    </div>
</div>

<div id="noti"></div>

<script id="treelist-dynamic-parms-actionname-template" type="text/x-kendo-template">
    #: ActionName # 
    # if ( IsActionGroup ) { #
    <span class='superscript'> G</span>
    # } #
</script>

@*<script id="treelist-dynamic-parms-override-template" type="text/x-kendo-template">
    # if ( Name != null && Name != '' ) { #
    # if ( Options == null || Options.length == 0 ) { #
    <input type='text' name=#:Name# value='' class="k-textbox js-dynamic-value" />
    # } else { #
    <select name=#:Name# class="js-dynamic-value">
        <option value="" selected="selected"></option>
        # for ( var i = 0; i < Options.length; i++ ) { #
        <option value=#: Options[i].Key #>#= Options[i].Value #</option>
        # } #
    </select>
    # } #
    # } #
</script>*@
<script id="treelist-dynamic-parms-override-template" type="text/x-kendo-template">
    # if ( Source != null && Source != '' && Editable ) { #
    #   if ( Options == null || Options.length == 0 ) { #
    #     var pattern = Validation == null ? "" : "pattern=" + Validation.replace(/'/g, "\x27").replace(/"/g, "\x22") + ' validationMessage="Failed validation rule ' + Validation.replace(/"/g, "&quot;") + '"' #
    <input type='text' name=#:Source# value='' class="k-textbox js-dynamic-value" #=pattern# />
    #   } else { #
    # var dataRole = RestrictToOptions ? "dropdownlist" : "combobox" #
    <select name=#:Source# class="js-dynamic-value" data-role=#:dataRole#>
        <option value=""></option>
        # for ( var i = 0; i < Options.length; i++ ) { #
        # var selected = Options[i].IsDefault ? "selected" : "" #
        <option value=#:Options[i].Key# #:selected#>#= Options[i].Value #</option>
        # } #
    </select>
    # } #
    <span class="k-invalid-msg" data-for=#:Source#></span>
    # } #
</script>
<script id="treelist-dynamic-parms-pass-blank-template" type="text/x-kendo-template">
    # if ( Source != null && Source != '' && Editable ) { #
    @(Html.Kendo().CheckBox().Name( "passblank#:Source#" ).Label( "" ).HtmlAttributes( new { @class = "js-pass-blank" } ))
    # } #
</script>
<script type="text/kendo-template" id="val-msg">
    <span class="k-widget k-tooltip k-tooltip-validation k-invalid-msg field-validation-error" data-for="#=field#" data-valmsg-for="#=field#" id="#=field#_validationMessage">
        <span class="k-icon k-i-warning"> </span>#=message#
    </span>
</script>
<script id="diagram-plan-content-template" type="text/x-kendo-template">
    <div class="diagram-box oneline">
        <div>
            <span>#: Name #</span>
            # if ( IsActionGroup) { #
            <span class='superscript'>G</span>
            @*<sup>G</sup>*@
            # } #
        </div>        
    </div>
</script>

<script id="diagram-resultplan-content-template" type="text/x-kendo-template">    
    <div class="diagram-box twolines">
        <div>
            <span>#: Name #</span>
            # if ( IsActionGroup ) { #
            <span class='superscript'>G</span>
            # } #
        </div>
        <div><span>#: StatusText #</span></div>
    </div>
</script>

@section Styles {
    <link href="~/Styles.plan-execution.min.css" rel="stylesheet" />
}
@section Scripts {
    <script src="~/Scripts.plan-execution.min.js"></script>
    }



